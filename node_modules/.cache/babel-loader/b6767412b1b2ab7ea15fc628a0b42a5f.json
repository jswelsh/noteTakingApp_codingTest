{"ast":null,"code":"var _jsxFileName = \"/home/ody7/repos/interviewTestApps/note_taking_app/src/components/Notes.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Divider, Grid, Paper, Typography } from '@mui/material';\nimport React, { useState } from 'react';\nimport dayjs from 'dayjs';\nimport { AddNote } from './AddNote';\nimport { EditCard } from './EditCard';\nimport { Note } from './Note';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Notes = () => {\n  _s();\n\n  const [notes, setNotes] = useState(() => {\n    // getting stored notes\n    const saved = localStorage.getItem(\"notesFromJswApp\");\n    const initialValue = JSON.parse(saved);\n    return initialValue || [];\n  });\n  const [noteBeingEditedIndex, setNoteBeingEditedIndex] = useState(null);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [isAddNoteMode, setIsAddNoteMode] = useState(false);\n  const [currentNoteContent, setCurrentNoteContent] = useState('');\n  const [currentNoteTitle, setCurrentNoteTitle] = useState('');\n\n  const handleUpdatingNotes = newNotes => {\n    localStorage.setItem(\"notes\", JSON.stringify(newNotes));\n    setNotes(newNotes);\n  };\n\n  const handleEdit = currentNotes => {\n    handleUpdatingNotes(currentNotes);\n    setIsEditMode(false);\n    setIsAddNoteMode(false);\n  };\n\n  const handleDelete = index => {\n    const newCurrentNotes = [...notes];\n    newCurrentNotes.splice(index, 1);\n    handleUpdatingNotes(newCurrentNotes);\n  };\n\n  const buttonOnClickHandler = _ref => {\n    let {\n      target: {\n        id\n      }\n    } = _ref;\n\n    if (id === 'addNote') {\n      setIsAddNoteMode(true);\n    } else if (id === 'submitNote') {\n      const currentNotes = [...notes];\n      currentNotes.unshift({\n        id: dayjs(),\n        title: currentNoteTitle,\n        created: dayjs(),\n        lastEdited: dayjs(),\n        content: currentNoteContent\n      });\n      handleUpdatingNotes(currentNotes);\n      setIsAddNoteMode(false);\n      setCurrentNoteContent('');\n      setCurrentNoteTitle('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    variant: \"outlined\",\n    sx: {\n      my: {\n        xs: 3,\n        md: 6\n      },\n      p: {\n        xs: 2,\n        md: 3\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      sx: {\n        width: '900px'\n      },\n      children: \"Notes\",\n      component: \"h1\",\n      variant: \"h4\",\n      align: \"center\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), isEditMode ? /*#__PURE__*/_jsxDEV(EditCard, {\n      notes: notes,\n      handleEdit: handleEdit,\n      noteBeingEditedIndex: noteBeingEditedIndex,\n      note: notes[noteBeingEditedIndex]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      rowSpacing: 1,\n      columnSpacing: {\n        md: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        mb: 3,\n        mt: 2,\n        children: isAddNoteMode ? /*#__PURE__*/_jsxDEV(AddNote, {\n          currentNoteTitle: currentNoteTitle,\n          currentNoteContent: currentNoteContent,\n          buttonOnClickHandler: buttonOnClickHandler,\n          setCurrentNoteContent: setCurrentNoteContent,\n          setCurrentNoteTitle: setCurrentNoteTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          children: \"Add New Note\",\n          id: \"addNote\",\n          variant: \"contained\",\n          fullWidth: true,\n          onClick: buttonOnClickHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), notes.map((note, index) => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        setNoteBeingEditedIndex: setNoteBeingEditedIndex,\n        setIsEditMode: setIsEditMode,\n        handleDelete: handleDelete,\n        index: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Notes, \"GKKoxb88TjBEJc0WRW+YHsUSMIg=\");\n\n_c = Notes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["/home/ody7/repos/interviewTestApps/note_taking_app/src/components/Notes.js"],"names":["Button","Divider","Grid","Paper","Typography","React","useState","dayjs","AddNote","EditCard","Note","Notes","notes","setNotes","saved","localStorage","getItem","initialValue","JSON","parse","noteBeingEditedIndex","setNoteBeingEditedIndex","isEditMode","setIsEditMode","isAddNoteMode","setIsAddNoteMode","currentNoteContent","setCurrentNoteContent","currentNoteTitle","setCurrentNoteTitle","handleUpdatingNotes","newNotes","setItem","stringify","handleEdit","currentNotes","handleDelete","index","newCurrentNotes","splice","buttonOnClickHandler","target","id","unshift","title","created","lastEdited","content","my","xs","md","p","width","map","note"],"mappings":"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","sourcesContent":["import {\n  Button, Divider,\n  Grid, Paper,\n  Typography\n} from '@mui/material';\nimport React, { useState } from 'react';\nimport dayjs from 'dayjs';\nimport { AddNote } from './AddNote';\nimport { EditCard } from './EditCard';\nimport { Note } from './Note';\n\nexport const Notes = () => {\n\n  const [notes, setNotes] = useState(() => {\n    // getting stored notes\n    const saved = localStorage.getItem(\"notesFromJswApp\");\n    const initialValue = JSON.parse(saved);\n    return initialValue || [];\n  });\n  const [noteBeingEditedIndex, setNoteBeingEditedIndex] = useState(null);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [isAddNoteMode, setIsAddNoteMode] = useState(false);\n  const [currentNoteContent, setCurrentNoteContent] = useState('')\n  const [currentNoteTitle, setCurrentNoteTitle] = useState('')\n\n  const handleUpdatingNotes = (newNotes) => {\n    localStorage.setItem(\"notes\", JSON.stringify(newNotes))\n    setNotes(newNotes)\n  }\n  const handleEdit = (currentNotes) => {\n    handleUpdatingNotes(currentNotes)\n    setIsEditMode(false)\n    setIsAddNoteMode(false)\n  }\n  const handleDelete = (index) => {\n    const newCurrentNotes = [...notes]\n    newCurrentNotes.splice(index,1)\n    handleUpdatingNotes(newCurrentNotes)\n  }\n  const buttonOnClickHandler = ({target:{id}}) => {\n    if (id === 'addNote') {\n      setIsAddNoteMode(true)\n    } else if (id === 'submitNote') {\n      const currentNotes = [...notes]\n      currentNotes.unshift({\n        id: dayjs(),\n        title: currentNoteTitle,\n        created: dayjs(),\n        lastEdited: dayjs(),\n        content: currentNoteContent\n      })\n      handleUpdatingNotes(currentNotes)\n      setIsAddNoteMode(false)\n      setCurrentNoteContent('')\n      setCurrentNoteTitle('')\n    }\n  }\n\n  return (\n    <Paper variant=\"outlined\" sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }} >\n      <Typography sx={{ width:'900px' }} children=\"Notes\" component=\"h1\" variant=\"h4\" align=\"center\" />\n      <Divider />\n      {isEditMode\n        ? <EditCard\n            notes={notes}\n            handleEdit={handleEdit}\n            noteBeingEditedIndex={noteBeingEditedIndex}\n            note={notes[noteBeingEditedIndex]}\n          />\n        :\n        <Grid container rowSpacing={1} columnSpacing={{ md: 3 }} >\n          <Grid item xs={12} mb={3} mt={2}>\n            {isAddNoteMode\n            ? <AddNote\n                currentNoteTitle={currentNoteTitle}\n                currentNoteContent={currentNoteContent}\n                buttonOnClickHandler={buttonOnClickHandler}\n                setCurrentNoteContent={setCurrentNoteContent}\n                setCurrentNoteTitle={setCurrentNoteTitle}\n              />\n            : <Button\n                children='Add New Note'\n                id=\"addNote\"\n                variant=\"contained\"\n                fullWidth\n                onClick={buttonOnClickHandler}\n              />\n            }\n          </Grid>\n            {notes.map((note, index) =>\n            <Note\n              note={note}\n              setNoteBeingEditedIndex={setNoteBeingEditedIndex}\n              setIsEditMode={setIsEditMode}\n              handleDelete={handleDelete}\n              index={index}\n            />)}\n        </Grid>}\n    </Paper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}