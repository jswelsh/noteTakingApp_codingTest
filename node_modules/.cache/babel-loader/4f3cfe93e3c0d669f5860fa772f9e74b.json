{"ast":null,"code":"var _jsxFileName = \"/home/ody7/repos/interviewTestApps/note_taking_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { AppBar, Button, CssBaseline, Container, Toolbar, Paper, Typography, Divider, Grid, TextField } from '@mui/material';\nimport TextareaAutosize from '@mui/base/TextareaAutosize';\nimport { EditCard } from './components/EditCard';\nimport Note from './components/Note';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [notes, setNotes] = useState(() => {\n    // getting stored notes\n    const saved = localStorage.getItem(\"notes\");\n    const initialValue = JSON.parse(saved);\n    return initialValue || [];\n  });\n  const [noteBeingEditedIndex, setNoteBeingEditedIndex] = useState(null);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [isAddNoteMode, setIsAddNoteMode] = useState(false);\n  const [currentNoteContent, setCurrentNoteContent] = useState('');\n  const [currentNoteTitle, setCurrentNoteTitle] = useState('');\n\n  const handleUpdatingNotes = newNotes => {\n    localStorage.setItem(\"notes\", JSON.stringify(newNotes));\n    setNotes(newNotes);\n  };\n\n  const handleEdit = currentNotes => {\n    handleUpdatingNotes(currentNotes);\n    setIsEditMode(false);\n    setIsAddNoteMode(false);\n  };\n\n  const handleDelete = index => {\n    const newCurrentNotes = [...notes];\n    newCurrentNotes.splice(index, 1);\n    handleUpdatingNotes(newCurrentNotes);\n  };\n\n  const buttonOnClickHandler = _ref => {\n    let {\n      target: {\n        id\n      }\n    } = _ref;\n\n    if (id === 'addNote') {\n      setIsAddNoteMode(true);\n    } else if (id === 'submitNote') {\n      const currentNotes = [...notes];\n      currentNotes.push({\n        id: Date.now(),\n        title: currentNoteTitle,\n        created: new Date().toISOString().slice(5, 10),\n        lastEdited: new Date().toISOString().slice(5, 10),\n        content: currentNoteContent\n      });\n      handleUpdatingNotes(currentNotes);\n      setIsAddNoteMode(false);\n      setCurrentNoteContent(null);\n      setCurrentNoteTitle(null);\n    }\n  };\n\n  const handleTextInput = _ref2 => {\n    let {\n      target: {\n        id,\n        value\n      }\n    } = _ref2;\n    if (id === \"contentInput\") setCurrentNoteContent(value);\n    if (id === \"titleInput\") setCurrentNoteTitle(value);\n  };\n\n  console.log(notes);\n  console.log(isEditMode);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"absolute\",\n      color: \"default\",\n      elevation: 0,\n      sx: {\n        position: 'relative',\n        borderBottom: t => `1px solid ${t.palette.divider}`\n      },\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Note App\",\n          variant: \"h6\",\n          color: \"inherit\",\n          noWrap: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"sm\",\n      sx: {\n        mb: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        variant: \"outlined\",\n        sx: {\n          my: {\n            xs: 3,\n            md: 6\n          },\n          p: {\n            xs: 2,\n            md: 3\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Notes\",\n          component: \"h1\",\n          variant: \"h4\",\n          align: \"center\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), isEditMode ? /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          box: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(EditCard, {\n            notes: notes,\n            handleEdit: handleEdit,\n            noteBeingEditedIndex: noteBeingEditedIndex,\n            note: notes[noteBeingEditedIndex]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          rowSpacing: 1,\n          columnSpacing: {\n            md: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            mb: 3,\n            mt: 2,\n            children: isAddNoteMode ? /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"titleInput\",\n                  label: \"Title\",\n                  value: currentNoteTitle,\n                  variant: \"standard\",\n                  fullWidth: true,\n                  onChange: handleTextInput\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n                  id: \"contentInput\",\n                  placeholder: \"Add Note Content\",\n                  value: currentNoteContent,\n                  minRows: 3,\n                  style: {\n                    width: \"100%\"\n                  },\n                  onChange: handleTextInput\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  children: \"Submit\",\n                  id: \"submitNote\",\n                  variant: \"contained\",\n                  fullWidth: true,\n                  onClick: buttonOnClickHandler\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              children: \"Add New Note\",\n              id: \"addNote\",\n              variant: \"contained\",\n              fullWidth: true,\n              onClick: buttonOnClickHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), notes.map((note, index) => /*#__PURE__*/_jsxDEV(Note, {\n            note: note,\n            setNoteBeingEditedIndex: setNoteBeingEditedIndex,\n            setIsEditMode: setIsEditMode,\n            handleDelete: handleDelete,\n            index: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"AzX7oIu6gYYrkm9+xJpQBM6G2PI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ody7/repos/interviewTestApps/note_taking_app/src/App.js"],"names":["React","useState","AppBar","Button","CssBaseline","Container","Toolbar","Paper","Typography","Divider","Grid","TextField","TextareaAutosize","EditCard","Note","App","notes","setNotes","saved","localStorage","getItem","initialValue","JSON","parse","noteBeingEditedIndex","setNoteBeingEditedIndex","isEditMode","setIsEditMode","isAddNoteMode","setIsAddNoteMode","currentNoteContent","setCurrentNoteContent","currentNoteTitle","setCurrentNoteTitle","handleUpdatingNotes","newNotes","setItem","stringify","handleEdit","currentNotes","handleDelete","index","newCurrentNotes","splice","buttonOnClickHandler","target","id","push","Date","now","title","created","toISOString","slice","lastEdited","content","handleTextInput","value","console","log","position","borderBottom","t","palette","divider","mb","my","xs","md","p","width","map","note"],"mappings":"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","sourcesContent":["\nimport React, {useState} from 'react';\n\nimport {\n  AppBar,\n  Button,\n  CssBaseline,\n  Container,\n  Toolbar,\n  Paper,\n  Typography,\n  Divider,\n  Grid,\n  TextField,\n} from '@mui/material';\nimport TextareaAutosize from '@mui/base/TextareaAutosize';\nimport {EditCard} from './components/EditCard';\nimport Note from './components/Note';\n\nfunction App() {\n\n  const [notes, setNotes] = useState(() => {\n    // getting stored notes\n    const saved = localStorage.getItem(\"notes\");\n    const initialValue = JSON.parse(saved);\n    return initialValue || [];\n  });\n  const [noteBeingEditedIndex, setNoteBeingEditedIndex] = useState(null);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [isAddNoteMode, setIsAddNoteMode] = useState(false);\n  const [currentNoteContent, setCurrentNoteContent] = useState('')\n  const [currentNoteTitle, setCurrentNoteTitle] = useState('')\n\n  const handleUpdatingNotes = (newNotes) => {\n    localStorage.setItem(\"notes\", JSON.stringify(newNotes))\n    setNotes(newNotes)\n  }\n  const handleEdit = (currentNotes) => {\n    handleUpdatingNotes(currentNotes)\n    setIsEditMode(false)\n    setIsAddNoteMode(false)\n  }\n  const handleDelete = (index) => {\n    const newCurrentNotes = [...notes]\n    newCurrentNotes.splice(index,1)\n    handleUpdatingNotes(newCurrentNotes)\n  }\n  const buttonOnClickHandler = ({target:{id}}) => {\n    if (id === 'addNote') {\n      setIsAddNoteMode(true)\n    } else if (id === 'submitNote') {\n      const currentNotes = [...notes]\n      currentNotes.push({\n        id: Date.now(),\n        title: currentNoteTitle,\n        created: new Date().toISOString().slice(5,10),\n        lastEdited: new Date().toISOString().slice(5,10),\n        content: currentNoteContent\n      })\n      handleUpdatingNotes(currentNotes)\n      setIsAddNoteMode(false)\n      setCurrentNoteContent(null)\n      setCurrentNoteTitle(null)\n    }\n  }\n  const handleTextInput = ({target:{id,value}}) => {\n    if (id === \"contentInput\") setCurrentNoteContent(value)\n    if (id === \"titleInput\") setCurrentNoteTitle(value)\n  }\n  console.log(notes);\n  console.log(isEditMode);\n  return (\n    <>\n      <CssBaseline />\n      <AppBar\n        position=\"absolute\"\n        color=\"default\"\n        elevation={0}\n        sx={{\n          position: 'relative',\n          borderBottom: (t) => `1px solid ${t.palette.divider}`,\n        }}\n      >\n        <Toolbar>\n          <Typography children=\"Note App\" variant=\"h6\" color=\"inherit\" noWrap />\n        </Toolbar>\n      </AppBar>\n      <Container component=\"main\" maxWidth=\"sm\" sx={{ mb: 4 }}>\n        <Paper variant=\"outlined\" sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }} >\n          <Typography children=\"Notes\" component=\"h1\" variant=\"h4\" align=\"center\" />\n          <Divider />\n          {isEditMode\n            ? <Grid\n                item\n                box\n                xs={12}\n              >\n                <EditCard\n                  notes={notes}\n                  handleEdit={handleEdit}\n                  noteBeingEditedIndex={noteBeingEditedIndex}\n                  note={notes[noteBeingEditedIndex]}\n                />\n              </Grid>\n            :\n            <Grid container rowSpacing={1} columnSpacing={{ md: 3 }} >\n              <Grid item xs={12} mb={3} mt={2}>\n                {isAddNoteMode\n                ? <Grid container >\n                    <Grid item xs={12}>\n                      <TextField\n                        id=\"titleInput\"\n                        label=\"Title\"\n                        value={currentNoteTitle}\n                        variant=\"standard\"\n                        fullWidth\n                        onChange={handleTextInput}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <TextareaAutosize\n                        id=\"contentInput\"\n                        placeholder=\"Add Note Content\"\n                        value={currentNoteContent}\n                        minRows={3}\n                        style={{ width: \"100%\"}}\n                        onChange={handleTextInput}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Button\n                        children='Submit'\n                        id=\"submitNote\"\n                        variant=\"contained\"\n                        fullWidth\n                        onClick={buttonOnClickHandler}\n                      />\n                    </Grid>\n                  </Grid>\n                : <Button\n                    children='Add New Note'\n                    id=\"addNote\"\n                    variant=\"contained\"\n                    fullWidth\n                    onClick={buttonOnClickHandler}\n                  />\n                }\n              </Grid>\n                {notes.map((note, index) =>\n                <Note\n                  note={note}\n                  setNoteBeingEditedIndex={setNoteBeingEditedIndex}\n                  setIsEditMode={setIsEditMode}\n                  handleDelete={handleDelete}\n                  index={index}\n                />)}\n            </Grid>}\n        </Paper>\n      </Container>\n    </>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}