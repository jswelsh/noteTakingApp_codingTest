{"ast":null,"code":"import _slicedToArray from \"/home/ody7/repos/interviewTestApps/note_taking_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport t from \"react\";\n\nfunction e() {\n  return (e = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n      }\n    }\n\n    return t;\n  }).apply(this, arguments);\n}\n\nvar n = /[\\'\\\"]/;\nvar r = [\"children\", \"options\"],\n    o = {\n  accesskey: \"accessKey\",\n  allowfullscreen: \"allowFullScreen\",\n  allowtransparency: \"allowTransparency\",\n  autocomplete: \"autoComplete\",\n  autofocus: \"autoFocus\",\n  autoplay: \"autoPlay\",\n  cellpadding: \"cellPadding\",\n  cellspacing: \"cellSpacing\",\n  charset: \"charSet\",\n  class: \"className\",\n  classid: \"classId\",\n  colspan: \"colSpan\",\n  contenteditable: \"contentEditable\",\n  contextmenu: \"contextMenu\",\n  crossorigin: \"crossOrigin\",\n  enctype: \"encType\",\n  for: \"htmlFor\",\n  formaction: \"formAction\",\n  formenctype: \"formEncType\",\n  formmethod: \"formMethod\",\n  formnovalidate: \"formNoValidate\",\n  formtarget: \"formTarget\",\n  frameborder: \"frameBorder\",\n  hreflang: \"hrefLang\",\n  inputmode: \"inputMode\",\n  keyparams: \"keyParams\",\n  keytype: \"keyType\",\n  marginheight: \"marginHeight\",\n  marginwidth: \"marginWidth\",\n  maxlength: \"maxLength\",\n  mediagroup: \"mediaGroup\",\n  minlength: \"minLength\",\n  novalidate: \"noValidate\",\n  radiogroup: \"radioGroup\",\n  readonly: \"readOnly\",\n  rowspan: \"rowSpan\",\n  spellcheck: \"spellCheck\",\n  srcdoc: \"srcDoc\",\n  srclang: \"srcLang\",\n  srcset: \"srcSet\",\n  tabindex: \"tabIndex\",\n  usemap: \"useMap\"\n},\n    a = {\n  amp: \"&\",\n  apos: \"'\",\n  gt: \">\",\n  lt: \"<\",\n  nbsp: \" \",\n  quot: \"“\"\n},\n    c = [\"style\", \"script\"],\n    s = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n    i = /mailto:/i,\n    l = /\\n{2,}$/,\n    u = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,\n    _2 = /^ *> ?/gm,\n    f = /^ {2,}\\n/,\n    d = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/,\n    p = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/,\n    m = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n    g = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n    y = /^(?:\\n *)*\\n/,\n    h = /\\r\\n?/g,\n    k = /^\\[\\^([^\\]]+)](:.*)\\n/,\n    x = /^\\[\\^([^\\]]+)]/,\n    b = /\\f/g,\n    v = /^\\s*?\\[(x|\\s)\\]/,\n    $ = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n    S = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n    w = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,\n    z = /&([a-z]+);/g,\n    E = /^<!--[\\s\\S]*?(?:-->)/,\n    A = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n    R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n    I = /^\\{.*\\}$/,\n    M = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n    O = /^<([^ >]+@[^ >]+)>/,\n    B = /^<([^ >]+:\\/[^ >]+)>/,\n    L = / *\\n+$/,\n    T = /(?:^|\\n)( *)$/,\n    j = /-([a-z])?/gi,\n    C = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,\n    D = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/,\n    N = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/,\n    Z = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n    F = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n    P = /(\\[|\\])/g,\n    G = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n    H = /\\t/g,\n    q = /^ *\\| */,\n    U = /(^ *\\||\\| *$)/g,\n    V = / *$/,\n    W = /^ *:-+: *$/,\n    K = /^ *:-+ *$/,\n    Q = /^ *-+: *$/,\n    X = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,\n    J = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/,\n    Y = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,\n    tt = /^\\\\([^0-9A-Za-z\\s])/,\n    et = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n    nt = /(^\\n+|\\n+$|\\s+$)/g,\n    rt = /^([ \\t]*)/,\n    ot = /\\\\([^0-9A-Z\\s])/gi,\n    at = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) +\"),\n    ct = new RegExp(\"( *)((?:[*+-]|\\\\d+\\\\.)) +[^\\\\n]*(?:\\\\n(?!\\\\1(?:[*+-]|\\\\d+\\\\.) )[^\\\\n]*)*(\\\\n|$)\", \"gm\"),\n    st = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1(?:[*+-]|\\\\d+\\\\.) (?!(?:[*+-]|\\\\d+\\\\.) ))\\\\n*|\\\\s*\\\\n*$)\"),\n    it = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\",\n    lt = new RegExp(\"^\\\\[(\" + it + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n    ut = new RegExp(\"^!\\\\[(\" + it + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n    _t = [u, m, p, $, S, w, E, R, ct, st, C, D];\n\nfunction ft(t) {\n  return t.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\n\nfunction dt(t) {\n  return Q.test(t) ? \"right\" : W.test(t) ? \"center\" : K.test(t) ? \"left\" : null;\n}\n\nfunction pt(t, e, n) {\n  var r = n.t;\n  n.t = !0;\n  var o = e(t.trim(), n);\n  n.t = r;\n  var a = [[]];\n  return o.forEach(function (t, e) {\n    \"tableSeparator\" === t.type ? 0 !== e && e !== o.length - 1 && a.push([]) : (\"text\" !== t.type || null != o[e + 1] && \"tableSeparator\" !== o[e + 1].type || (t.content = t.content.replace(V, \"\")), a[a.length - 1].push(t));\n  }), a;\n}\n\nfunction mt(t, e, n) {\n  n.o = !0;\n\n  var r = pt(t[1], e, n),\n      o = t[2].replace(U, \"\").split(\"|\").map(dt),\n      a = function (t, e, n) {\n    return t.trim().split(\"\\n\").map(function (t) {\n      return pt(t, e, n);\n    });\n  }(t[3], e, n);\n\n  return n.o = !1, {\n    align: o,\n    cells: a,\n    header: r,\n    type: \"table\"\n  };\n}\n\nfunction gt(t, e) {\n  return null == t.align[e] ? {} : {\n    textAlign: t.align[e]\n  };\n}\n\nfunction yt(t) {\n  return function (e, n) {\n    return n.o ? t.exec(e) : null;\n  };\n}\n\nfunction ht(t) {\n  return function (e, n) {\n    return n.o || n.i ? t.exec(e) : null;\n  };\n}\n\nfunction kt(t) {\n  return function (e, n) {\n    return n.o || n.i ? null : t.exec(e);\n  };\n}\n\nfunction xt(t) {\n  return function (e) {\n    return t.exec(e);\n  };\n}\n\nfunction bt(t) {\n  try {\n    if (decodeURIComponent(t).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data):/i)) return null;\n  } catch (t) {\n    return null;\n  }\n\n  return t;\n}\n\nfunction vt(t) {\n  return t.replace(ot, \"$1\");\n}\n\nfunction $t(t, e, n) {\n  var r = n.o || !1,\n      o = n.i || !1;\n  n.o = !0, n.i = !0;\n  var a = t(e, n);\n  return n.o = r, n.i = o, a;\n}\n\nfunction St(t, e, n) {\n  var r = n.o || !1,\n      o = n.i || !1;\n  n.o = !1, n.i = !0;\n  var a = t(e, n);\n  return n.o = r, n.i = o, a;\n}\n\nfunction wt(t, e, n) {\n  return n.o = !1, t(e + \"\\n\\n\", n);\n}\n\nvar zt = function zt(t, e, n) {\n  return {\n    content: $t(e, t[1], n)\n  };\n};\n\nfunction Et() {\n  return {};\n}\n\nfunction At() {\n  return null;\n}\n\nfunction Rt() {\n  for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {\n    t[_key] = arguments[_key];\n  }\n\n  return t.filter(Boolean).join(\" \");\n}\n\nfunction It(t, e, n) {\n  var r = t;\n  var o = e.split(\".\");\n\n  for (; o.length && (r = r[o[0]], void 0 !== r);) {\n    o.shift();\n  }\n\n  return r || n;\n}\n\nvar Mt;\n\nfunction Ot(r) {\n  var U = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  U.overrides = U.overrides || {}, U.slugify = U.slugify || ft, U.namedCodesToUnicode = U.namedCodesToUnicode ? e({}, a, U.namedCodesToUnicode) : a;\n  var V = U.createElement || t.createElement;\n\n  function W(t, n) {\n    var o = It(U.overrides, \"\".concat(t, \".props\"), {});\n\n    for (var _len2 = arguments.length, r = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      r[_key2 - 2] = arguments[_key2];\n    }\n\n    return V.apply(void 0, [function (t, e) {\n      var n = It(e, t);\n      return n ? \"function\" == typeof n || \"object\" == typeof n && \"render\" in n ? n : It(e, \"\".concat(t, \".component\"), t) : t;\n    }(t, U.overrides), e({}, n, o, {\n      className: Rt(null == n ? void 0 : n.className, o.className) || void 0\n    })].concat(r));\n  }\n\n  function K(e) {\n    var n = !1;\n    U.forceInline ? n = !0 : U.forceBlock || (n = !1 === G.test(e));\n    var r = Ot(pt(n ? e : \"\".concat(e.replace(nt, \"\"), \"\\n\\n\"), {\n      o: n\n    }));\n    if (null === U.wrapper) return r;\n    var o = U.wrapper || (n ? \"span\" : \"div\");\n    var a;\n    if (r.length > 1 || U.forceWrapper) a = r;else {\n      if (1 === r.length) return a = r[0], \"string\" == typeof a ? W(\"span\", {\n        key: \"outer\"\n      }, a) : a;\n      a = null;\n    }\n    return t.createElement(o, {\n      key: \"outer\"\n    }, a);\n  }\n\n  function Q(e) {\n    var r = e.match(s);\n    return r ? r.reduce(function (e, r, a) {\n      var c = r.indexOf(\"=\");\n\n      if (-1 !== c) {\n        var _s = function (t) {\n          return -1 !== t.indexOf(\"-\") && null === t.match(A) && (t = t.replace(j, function (t, e) {\n            return e.toUpperCase();\n          })), t;\n        }(r.slice(0, c)).trim(),\n            _i = function (t) {\n          return t ? (n.test(t.charAt(0)) && (t = t.substr(1)), n.test(t.charAt(t.length - 1)) && (t = t.substr(0, t.length - 1)), t) : \"\";\n        }(r.slice(c + 1).trim()),\n            _l = o[_s] || _s,\n            _u = e[_l] = function (t, e) {\n          return \"style\" === t ? e.split(/;\\s?/).reduce(function (t, e) {\n            var n = e.slice(0, e.indexOf(\":\"));\n            return t[n.replace(/(-[a-z])/g, function (t) {\n              return t[1].toUpperCase();\n            })] = e.slice(n.length + 1).trim(), t;\n          }, {}) : \"href\" === t ? bt(e) : (e.match(I) && (e = e.slice(1, e.length - 1)), \"true\" === e || \"false\" !== e && e);\n        }(_s, _i);\n\n        \"string\" == typeof _u && (w.test(_u) || R.test(_u)) && (e[_l] = t.cloneElement(K(_u.trim()), {\n          key: a\n        }));\n      } else \"style\" !== r && (e[o[r] || r] = !0);\n\n      return e;\n    }, {}) : void 0;\n  }\n\n  var ot = [],\n      it = {},\n      dt = {\n    blockQuote: {\n      l: kt(u),\n      u: Mt.HIGH,\n      _: function _(t, e, n) {\n        return {\n          content: e(t[0].replace(_2, \"\"), n)\n        };\n      },\n      p: function p(t, e, n) {\n        return W(\"blockquote\", {\n          key: n.m\n        }, e(t.content, n));\n      }\n    },\n    breakLine: {\n      l: xt(f),\n      u: Mt.HIGH,\n      _: Et,\n      p: function p(t, e, n) {\n        return W(\"br\", {\n          key: n.m\n        });\n      }\n    },\n    breakThematic: {\n      l: kt(d),\n      u: Mt.HIGH,\n      _: Et,\n      p: function p(t, e, n) {\n        return W(\"hr\", {\n          key: n.m\n        });\n      }\n    },\n    codeBlock: {\n      l: kt(m),\n      u: Mt.MAX,\n      _: function _(t) {\n        return {\n          content: t[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\"),\n          lang: void 0\n        };\n      },\n      p: function p(t, e, n) {\n        return W(\"pre\", {\n          key: n.m\n        }, W(\"code\", {\n          className: t.lang ? \"lang-\".concat(t.lang) : \"\"\n        }, t.content));\n      }\n    },\n    codeFenced: {\n      l: kt(p),\n      u: Mt.MAX,\n      _: function _(t) {\n        return {\n          content: t[3],\n          lang: t[2] || void 0,\n          type: \"codeBlock\"\n        };\n      }\n    },\n    codeInline: {\n      l: ht(g),\n      u: Mt.LOW,\n      _: function _(t) {\n        return {\n          content: t[2]\n        };\n      },\n      p: function p(t, e, n) {\n        return W(\"code\", {\n          key: n.m\n        }, t.content);\n      }\n    },\n    footnote: {\n      l: kt(k),\n      u: Mt.MAX,\n      _: function _(t) {\n        return ot.push({\n          footnote: t[2],\n          identifier: t[1]\n        }), {};\n      },\n      p: At\n    },\n    footnoteReference: {\n      l: yt(x),\n      u: Mt.HIGH,\n      _: function _(t) {\n        return {\n          content: t[1],\n          target: \"#\".concat(U.slugify(t[1]))\n        };\n      },\n      p: function p(t, e, n) {\n        return W(\"a\", {\n          key: n.m,\n          href: bt(t.target)\n        }, W(\"sup\", {\n          key: n.m\n        }, t.content));\n      }\n    },\n    gfmTask: {\n      l: yt(v),\n      u: Mt.HIGH,\n      _: function _(t) {\n        return {\n          completed: \"x\" === t[1].toLowerCase()\n        };\n      },\n      p: function p(t, e, n) {\n        return W(\"input\", {\n          checked: t.completed,\n          key: n.m,\n          readOnly: !0,\n          type: \"checkbox\"\n        });\n      }\n    },\n    heading: {\n      l: kt($),\n      u: Mt.HIGH,\n      _: function _(t, e, n) {\n        return {\n          content: $t(e, t[2], n),\n          id: U.slugify(t[2]),\n          level: t[1].length\n        };\n      },\n      p: function p(t, e, n) {\n        return t.tag = \"h\".concat(t.level), W(t.tag, {\n          id: t.id,\n          key: n.m\n        }, e(t.content, n));\n      }\n    },\n    headingSetext: {\n      l: kt(S),\n      u: Mt.MAX,\n      _: function _(t, e, n) {\n        return {\n          content: $t(e, t[1], n),\n          level: \"=\" === t[2] ? 1 : 2,\n          type: \"heading\"\n        };\n      }\n    },\n    htmlComment: {\n      l: xt(E),\n      u: Mt.HIGH,\n      _: function _() {\n        return {};\n      },\n      p: At\n    },\n    image: {\n      l: ht(ut),\n      u: Mt.HIGH,\n      _: function _(t) {\n        return {\n          alt: t[1],\n          target: vt(t[2]),\n          title: t[3]\n        };\n      },\n      p: function p(t, e, n) {\n        return W(\"img\", {\n          key: n.m,\n          alt: t.alt || void 0,\n          title: t.title || void 0,\n          src: bt(t.target)\n        });\n      }\n    },\n    link: {\n      l: yt(lt),\n      u: Mt.LOW,\n      _: function _(t, e, n) {\n        return {\n          content: St(e, t[1], n),\n          target: vt(t[2]),\n          title: t[3]\n        };\n      },\n      p: function p(t, e, n) {\n        return W(\"a\", {\n          key: n.m,\n          href: bt(t.target),\n          title: t.title\n        }, e(t.content, n));\n      }\n    },\n    linkAngleBraceStyleDetector: {\n      l: yt(B),\n      u: Mt.MAX,\n      _: function _(t) {\n        return {\n          content: [{\n            content: t[1],\n            type: \"text\"\n          }],\n          target: t[1],\n          type: \"link\"\n        };\n      }\n    },\n    linkBareUrlDetector: {\n      l: function l(t, e) {\n        return e.g ? null : yt(M)(t, e);\n      },\n      u: Mt.MAX,\n      _: function _(t) {\n        return {\n          content: [{\n            content: t[1],\n            type: \"text\"\n          }],\n          target: t[1],\n          title: void 0,\n          type: \"link\"\n        };\n      }\n    },\n    linkMailtoDetector: {\n      l: yt(O),\n      u: Mt.MAX,\n      _: function _(t) {\n        var e = t[1],\n            n = t[1];\n        return i.test(n) || (n = \"mailto:\" + n), {\n          content: [{\n            content: e.replace(\"mailto:\", \"\"),\n            type: \"text\"\n          }],\n          target: n,\n          type: \"link\"\n        };\n      }\n    },\n    list: {\n      l: function l(t, e, n) {\n        var r = T.exec(n);\n        return !r || !e.h && e.o ? null : st.exec(t = r[1] + t);\n      },\n      u: Mt.HIGH,\n      _: function _(t, e, n) {\n        var r = t[2],\n            o = r.length > 1,\n            a = o ? +r : void 0,\n            c = t[0].replace(l, \"\\n\").match(ct);\n        var s = !1;\n        return {\n          items: c.map(function (t, r) {\n            var o = at.exec(t)[0].length,\n                a = new RegExp(\"^ {1,\" + o + \"}\", \"gm\"),\n                i = t.replace(a, \"\").replace(at, \"\"),\n                l = r === c.length - 1,\n                u = -1 !== i.indexOf(\"\\n\\n\") || l && s;\n            s = u;\n            var _ = n.o,\n                f = n.h;\n            var d;\n            n.h = !0, u ? (n.o = !1, d = i.replace(L, \"\\n\\n\")) : (n.o = !0, d = i.replace(L, \"\"));\n            var p = e(d, n);\n            return n.o = _, n.h = f, p;\n          }),\n          ordered: o,\n          start: a\n        };\n      },\n      p: function p(t, e, n) {\n        return W(t.ordered ? \"ol\" : \"ul\", {\n          key: n.m,\n          start: t.start\n        }, t.items.map(function (t, r) {\n          return W(\"li\", {\n            key: r\n          }, e(t, n));\n        }));\n      }\n    },\n    newlineCoalescer: {\n      l: kt(y),\n      u: Mt.LOW,\n      _: Et,\n      p: function p() {\n        return \"\\n\";\n      }\n    },\n    paragraph: {\n      l: kt(D),\n      u: Mt.LOW,\n      _: zt,\n      p: function p(t, e, n) {\n        return W(\"p\", {\n          key: n.m\n        }, e(t.content, n));\n      }\n    },\n    ref: {\n      l: yt(N),\n      u: Mt.MAX,\n      _: function _(t) {\n        return it[t[1]] = {\n          target: t[2],\n          title: t[4]\n        }, {};\n      },\n      p: At\n    },\n    refImage: {\n      l: ht(Z),\n      u: Mt.MAX,\n      _: function _(t) {\n        return {\n          alt: t[1] || void 0,\n          ref: t[2]\n        };\n      },\n      p: function p(t, e, n) {\n        return W(\"img\", {\n          key: n.m,\n          alt: t.alt,\n          src: bt(it[t.ref].target),\n          title: it[t.ref].title\n        });\n      }\n    },\n    refLink: {\n      l: yt(F),\n      u: Mt.MAX,\n      _: function _(t, e, n) {\n        return {\n          content: e(t[1], n),\n          fallbackContent: e(t[0].replace(P, \"\\\\$1\"), n),\n          ref: t[2]\n        };\n      },\n      p: function p(t, e, n) {\n        return it[t.ref] ? W(\"a\", {\n          key: n.m,\n          href: bt(it[t.ref].target),\n          title: it[t.ref].title\n        }, e(t.content, n)) : W(\"span\", {\n          key: n.m\n        }, e(t.fallbackContent, n));\n      }\n    },\n    table: {\n      l: kt(C),\n      u: Mt.HIGH,\n      _: mt,\n      p: function p(t, e, n) {\n        return W(\"table\", {\n          key: n.m\n        }, W(\"thead\", null, W(\"tr\", null, t.header.map(function (r, o) {\n          return W(\"th\", {\n            key: o,\n            style: gt(t, o)\n          }, e(r, n));\n        }))), W(\"tbody\", null, t.cells.map(function (r, o) {\n          return W(\"tr\", {\n            key: o\n          }, r.map(function (r, o) {\n            return W(\"td\", {\n              key: o,\n              style: gt(t, o)\n            }, e(r, n));\n          }));\n        })));\n      }\n    },\n    tableSeparator: {\n      l: function l(t, e) {\n        return e.t ? q.exec(t) : null;\n      },\n      u: Mt.HIGH,\n      _: function _() {\n        return {\n          type: \"tableSeparator\"\n        };\n      },\n      p: function p() {\n        return \" | \";\n      }\n    },\n    text: {\n      l: xt(et),\n      u: Mt.MIN,\n      _: function _(t) {\n        return {\n          content: t[0].replace(z, function (t, e) {\n            return U.namedCodesToUnicode[e] ? U.namedCodesToUnicode[e] : t;\n          })\n        };\n      },\n      p: function p(t) {\n        return t.content;\n      }\n    },\n    textBolded: {\n      l: ht(X),\n      u: Mt.MED,\n      _: function _(t, e, n) {\n        return {\n          content: e(t[2], n)\n        };\n      },\n      p: function p(t, e, n) {\n        return W(\"strong\", {\n          key: n.m\n        }, e(t.content, n));\n      }\n    },\n    textEmphasized: {\n      l: ht(J),\n      u: Mt.LOW,\n      _: function _(t, e, n) {\n        return {\n          content: e(t[2], n)\n        };\n      },\n      p: function p(t, e, n) {\n        return W(\"em\", {\n          key: n.m\n        }, e(t.content, n));\n      }\n    },\n    textEscaped: {\n      l: ht(tt),\n      u: Mt.HIGH,\n      _: function _(t) {\n        return {\n          content: t[1],\n          type: \"text\"\n        };\n      }\n    },\n    textStrikethroughed: {\n      l: ht(Y),\n      u: Mt.LOW,\n      _: zt,\n      p: function p(t, e, n) {\n        return W(\"del\", {\n          key: n.m\n        }, e(t.content, n));\n      }\n    }\n  };\n  !0 !== U.disableParsingRawHTML && (dt.htmlBlock = {\n    l: xt(w),\n    u: Mt.HIGH,\n    _: function _(t, e, n) {\n      var _t$3$match = t[3].match(rt),\n          _t$3$match2 = _slicedToArray(_t$3$match, 2),\n          r = _t$3$match2[1],\n          o = new RegExp(\"^\".concat(r), \"gm\"),\n          a = t[3].replace(o, \"\"),\n          s = (i = a, _t.some(function (t) {\n        return t.test(i);\n      }) ? wt : $t);\n\n      var i;\n      var l = t[1].toLowerCase(),\n          u = -1 !== c.indexOf(l);\n      n.g = n.g || \"a\" === l;\n\n      var _ = u ? t[3] : s(e, a, n);\n\n      return n.g = !1, {\n        attrs: Q(t[2]),\n        content: _,\n        noInnerParse: u,\n        tag: u ? l : t[1]\n      };\n    },\n    p: function p(t, n, r) {\n      return W(t.tag, e({\n        key: r.m\n      }, t.attrs), t.noInnerParse ? t.content : n(t.content, r));\n    }\n  }, dt.htmlSelfClosing = {\n    l: xt(R),\n    u: Mt.HIGH,\n    _: function _(t) {\n      return {\n        attrs: Q(t[2] || \"\"),\n        tag: t[1]\n      };\n    },\n    p: function p(t, n, r) {\n      return W(t.tag, e({}, t.attrs, {\n        key: r.m\n      }));\n    }\n  });\n\n  var pt = function (t) {\n    var e = Object.keys(t);\n\n    function n(r, o) {\n      var a = [],\n          c = \"\";\n\n      for (; r;) {\n        var _s2 = 0;\n\n        for (; _s2 < e.length;) {\n          var _i2 = e[_s2],\n              _l2 = t[_i2],\n              _u2 = _l2.l(r, o, c);\n\n          if (_u2) {\n            var _t2 = _u2[0];\n            r = r.substring(_t2.length);\n\n            var _e = _l2._(_u2, n, o);\n\n            null == _e.type && (_e.type = _i2), a.push(_e), c = _t2;\n            break;\n          }\n\n          _s2++;\n        }\n      }\n\n      return a;\n    }\n\n    return e.sort(function (e, n) {\n      var r = t[e].u,\n          o = t[n].u;\n      return r !== o ? r - o : e < n ? -1 : 1;\n    }), function (t, e) {\n      return n(function (t) {\n        return t.replace(h, \"\\n\").replace(b, \"\").replace(H, \"    \");\n      }(t), e);\n    };\n  }(dt),\n      Ot = (Bt = function (t) {\n    return function (e, n, r) {\n      return t[e.type].p(e, n, r);\n    };\n  }(dt), function t(e) {\n    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (Array.isArray(e)) {\n      var _r = n.m,\n          _o = [];\n\n      var _a = !1;\n\n      for (var _r2 = 0; _r2 < e.length; _r2++) {\n        n.m = _r2;\n\n        var _c = t(e[_r2], n),\n            _s3 = \"string\" == typeof _c;\n\n        _s3 && _a ? _o[_o.length - 1] += _c : _o.push(_c), _a = _s3;\n      }\n\n      return n.m = _r, _o;\n    }\n\n    return Bt(e, t, n);\n  });\n\n  var Bt;\n  var Lt = K(r);\n  return ot.length && Lt.props.children.push(W(\"footer\", {\n    key: \"footer\"\n  }, ot.map(function (t) {\n    return W(\"div\", {\n      id: U.slugify(t.identifier),\n      key: t.identifier\n    }, t.identifier, Ot(pt(t.footnote, {\n      o: !0\n    })));\n  }))), Lt;\n}\n\n!function (t) {\n  t[t.MAX = 0] = \"MAX\", t[t.HIGH = 1] = \"HIGH\", t[t.MED = 2] = \"MED\", t[t.LOW = 3] = \"LOW\", t[t.MIN = 4] = \"MIN\";\n}(Mt || (Mt = {}));\nexport default (function (e) {\n  var n = e.children,\n      o = e.options,\n      a = function (t, e) {\n    if (null == t) return {};\n    var n,\n        r,\n        o = {},\n        a = Object.keys(t);\n\n    for (r = 0; r < a.length; r++) {\n      e.indexOf(n = a[r]) >= 0 || (o[n] = t[n]);\n    }\n\n    return o;\n  }(e, r);\n\n  return t.cloneElement(Ot(n, o), a);\n});\nexport { Ot as compiler };","map":{"version":3,"sources":["/home/ody7/repos/interviewTestApps/note_taking_app/node_modules/markdown-to-jsx/node_modules/unquote/index.js","/home/ody7/repos/interviewTestApps/note_taking_app/node_modules/markdown-to-jsx/index.tsx"],"names":["reg","str","test","charAt","substr","length","ATTRIBUTE_TO_JSX_PROP_MAP","accesskey","allowfullscreen","allowtransparency","autocomplete","autofocus","autoplay","cellpadding","cellspacing","charset","class","classid","colspan","contenteditable","contextmenu","crossorigin","enctype","for","formaction","formenctype","formmethod","formnovalidate","formtarget","frameborder","hreflang","inputmode","keyparams","keytype","marginheight","marginwidth","maxlength","mediagroup","minlength","novalidate","radiogroup","readonly","rowspan","spellcheck","srcdoc","srclang","srcset","tabindex","usemap","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","PARAGRAPH_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","LIST_ITEM_PREFIX","LIST_R","LINK_INSIDE","LINK_R","IMAGE_R","BLOCK_SYNTAXES","input","some","r","slugify","replace","toLowerCase","parseTableAlignCapture","alignCapture","parseTableRow","source","parse","state","prevInTable","_inTable","tableRow","trim","cells","forEach","node","i","type","push","content","split","map","rowText","parseTable","capture","_inline","header","align","parseTableCells","getTableStyle","colIndex","textAlign","key","indexOf","match","_","letter","toUpperCase","value","reduce","styles","kvPair","slice","sanitizeUrl","rules","ruleList","Object","keys","sort","typeA","typeB","orderA","_order","orderB","nestedParse","result","prevCapture","ruleType","rule","_match","currCaptureString","substring","parsed","_parse","normalizeWhitespace","inlineRegex","regex","exec","simpleInlineRegex","_simple","blockRegex","anyScopeRegex","outputFunc","nestedReactOutput","ast","Array","isArray","oldKey","_key","lastWasString","nodeOut","isString","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","_react","cx","args","filter","Boolean","join","get","src","path","fb","ptr","frags","undefined","shift","tag","overrides","override","Priority","compiler","markdown","options","createElementFn","createElement","React","h","props","children","overrideProps","getTag","className","compile","forceInline","forceBlock","arr","emitter","parser","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","index","delimiterIdx","normalizeAttributeKey","unquote","mappedKey","normalizedValue","attributeValueToJSXPropValue","cloneElement","footnotes","refs","blockQuote","HIGH","output","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","target","href","gfmTask","completed","checked","readOnly","heading","id","level","headingSetext","htmlComment","image","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","_inAnchor","linkMailtoDetector","address","list","isStartOfLine","_list","bullet","ordered","start","items","lastItemWasAParagraph","item","space","spaceRegex","isLastItem","thisItemIsAParagraph","oldStateInline","oldStateList","adjustedContent","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","style","row","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","whitespace","trimmer","trimmed","parseFunc","tagName","noInnerParse","attrs","htmlSelfClosing","parserFor","ruleOutput","def","_ref"],"mappings":"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","sourcesContent":["var reg = /[\\'\\\"]/\n\nmodule.exports = function unquote(str) {\n  if (!str) {\n    return ''\n  }\n  if (reg.test(str.charAt(0))) {\n    str = str.substr(1)\n  }\n  if (reg.test(str.charAt(str.length - 1))) {\n    str = str.substr(0, str.length - 1)\n  }\n  return str\n}\n","/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport React from 'react'\n/// <reference path=\"unquote.d.ts\" />\nimport unquote from 'unquote'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n} as const\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<ReturnType<typeof parseInline>> =\n  (capture, parse, state: MarkdownToJSX.State) => {\n    return {\n      content: parseInline(parse, capture[1], state),\n    }\n  }\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { _inline }\n      )\n    )\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[mappedKey] =\n              attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node.content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node.target)}>\n            <sup key={state._key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state._key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node.target)}\n            title={node.title}\n          >\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      _match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state._inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state._inline depending\n          // on our list's looseness.\n          const oldStateInline = state._inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state._inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state._inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state._inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      _react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state._key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: blockRegex(PARAGRAPH_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key]._match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key]._parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          content,\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state._key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node.tag {...node.attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    jsx.props.children.push(\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={options.slugify(def.identifier)} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { _inline: true }))}\n            </div>\n          )\n        })}\n      </footer>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n"]},"metadata":{},"sourceType":"module"}